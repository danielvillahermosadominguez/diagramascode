@startuml
!define osaPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-opensecurityarchitecture2-icons/master
!include osaPuml/Common.puml
!include osaPuml/User/all.puml
!include osaPuml/Hardware/all.puml
!include osaPuml/Misc/all.puml
!include osaPuml/Server/all.puml
!include osaPuml/Site/all.puml
!include <C4/C4_Context.puml>
!include <c4/C4_Container.puml>
!include <office/Users/user.puml>
!include <awslib/AWSCommon>
!include <awslib/Compute/all.puml>
!include <awslib/general/all.puml>
!include <awslib/NetworkingAndContentDelivery/all.puml>
!include <awslib/Database/all.puml>
!include <awslib/GroupIcons/all.puml>
!include <awslib/Compute/ElasticKubernetesService.puml>

LAYOUT_WITH_LEGEND()
title Container context
System_Ext(imdb,"Imdb API","imdb.com: external API to get information")
System_Ext(googleImages, "Google Images API", "serpapi.com: use google api to get information")
Users(notLoggedUser, User, "Not logged user")
User(loggedUser, User, "Logged user")
APIGateway2(gateWay, "Gate Way", "AWS")
ClassicLoadBalancer(balancer, "Balancer", "AWS")
ClassicLoadBalancer(backendBalancer, "Backend Balancer", "AWS")

ElasticKubernetesService(eks, "EKS Control Plane", "")

EC2(hostDB,"Host DB - Virtual", "Linux - Ubuntu") {
    System_Boundary(DBBoundary,"DB") {
        ElastiCache(cache,"Elastic Cache - Redis","")
        Aurora(dataBase,"Data base", "Aurora - MySQL", "Changing MySQL to Aurora, increase the performance")
        Aurora(dataBaseReplication,"Data base Replication", "Aurora - MySQL", "Changing MySQL to Aurora, increase the performance")
        Rel(dataBaseReplication,dataBase,"read")
        Rel(cache, dataBaseReplication, "read")
    }
}

AutoScalingGroup(autoScalingBackend, "AutoScaling", "1-10") {
    EC2(hostBackend,"Host Backend - Virtual", "Linux - Ubuntu/Docker") {
        Container(serviceCatalog, "Backend-Catalog-read-only", "Apache Tomcat,Spring boot", "Set of services without state")
        Container(serviceCRUD, "Backend-CRUD", "Apache Tomcat,Spring boot", "Set of services without state")
        Rel(serviceCatalog,imdb,"https/JSON")
        Rel(serviceCatalog,googleImages,"https/JSON")
        Rel(serviceCatalog,dataBaseReplication, "JPA/SQL")
        Rel(serviceCatalog,cache, "key/value")
        Rel(serviceCRUD,dataBase, "JPA/SQL")
        Rel(backendBalancer,autoScalingBackend,"https")
        }
}

AutoScalingGroup(autoScalingFrontEnd, "AutoScaling", "1-10") {
    EC2(hostFrontEndPrimary,"Host Front 1 - Virtual", "Linux - docker") {
        Container(frontEndPrimary, "FrontEnd", "Angular/nodejs/Apache Tomcat", "Interaction of the user with the App")
        Rel(frontEndPrimary, backendBalancer, "https/JSON")
        Rel(frontEndPrimary, backendBalancer, "https/JSON")
    }
}

Rel_R(eks, autoScalingBackend, "")
Rel_R(eks, autoScalingFrontEnd, "")

Rel(gateWay, balancer, "https")
Rel(balancer, autoScalingFrontEnd, "https")

Rel(notLoggedUser,gateWay, "https")
Rel(loggedUser,gateWay, "https")
footer %filename() this is a system which is composed of a website where users can consult information related to movies
@enduml